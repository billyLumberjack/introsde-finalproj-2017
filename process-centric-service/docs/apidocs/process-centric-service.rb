#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class FoodHistory 

    # (no documentation provided)
    attr_accessor :dailyFood
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this FoodHistory
    def to_jaxb_json_hash
      _h = {}
      if !dailyFood.nil?
        _ha = Array.new
        dailyFood.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['dailyFood'] = _ha
      end
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this FoodHistory
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FoodHistory with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['dailyFood'].nil?
          _oa = _o['dailyFood']
            if(_oa.is_a? Hash)
              @dailyFood = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dailyFood =  Introsde::Finalproj::Model::DailyFood.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dailyFood = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dailyFood.push Introsde::Finalproj::Model::DailyFood.from_json(_item)
                 else
                   @dailyFood.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dailyFood = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a FoodHistory from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class ActivityHistory 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :dailyActivity

    # the json hash for this ActivityHistory
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      if !dailyActivity.nil?
        _ha = Array.new
        dailyActivity.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['dailyActivity'] = _ha
      end
      return _h
    end

    # the json (string form) for this ActivityHistory
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ActivityHistory with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['dailyActivity'].nil?
          _oa = _o['dailyActivity']
            if(_oa.is_a? Hash)
              @dailyActivity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dailyActivity =  Introsde::Finalproj::Model::DailyActivity.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dailyActivity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dailyActivity.push Introsde::Finalproj::Model::DailyActivity.from_json(_item)
                 else
                   @dailyActivity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dailyActivity = _oa
            end
          end
    end

    # constructs a ActivityHistory from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class Food 

    # (no documentation provided)
    attr_accessor :calories
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :quantity
    # (no documentation provided)
    attr_accessor :unit

    # the json hash for this Food
    def to_jaxb_json_hash
      _h = {}
      _h['calories'] = calories.to_jaxb_json_hash unless calories.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['quantity'] = quantity.to_jaxb_json_hash unless quantity.nil?
      _h['unit'] = unit.to_jaxb_json_hash unless unit.nil?
      return _h
    end

    # the json (string form) for this Food
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Food with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['calories'].nil?
          _oa = _o['calories']
            if(_oa.is_a? Hash)
              @calories = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @calories =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @calories = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @calories.push Fixnum.from_json(_item)
                 else
                   @calories.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @calories = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['quantity'].nil?
          _oa = _o['quantity']
            if(_oa.is_a? Hash)
              @quantity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @quantity =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @quantity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @quantity.push Fixnum.from_json(_item)
                 else
                   @quantity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @quantity = _oa
            end
          end
        if !_o['unit'].nil?
          _oa = _o['unit']
            if(_oa.is_a? Hash)
              @unit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unit =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unit.push String.from_json(_item)
                 else
                   @unit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unit = _oa
            end
          end
    end

    # constructs a Food from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class DailyFood 

    # (no documentation provided)
    attr_accessor :food
    # (no documentation provided)
    attr_accessor :date

    # the json hash for this DailyFood
    def to_jaxb_json_hash
      _h = {}
      if !food.nil?
        _ha = Array.new
        food.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['food'] = _ha
      end
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      return _h
    end

    # the json (string form) for this DailyFood
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DailyFood with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['food'].nil?
          _oa = _o['food']
            if(_oa.is_a? Hash)
              @food = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @food =  Introsde::Finalproj::Model::Food.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @food = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @food.push Introsde::Finalproj::Model::Food.from_json(_item)
                 else
                   @food.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @food = _oa
            end
          end
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Fixnum.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
    end

    # constructs a DailyFood from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class User 

    # (no documentation provided)
    attr_accessor :username
    # (no documentation provided)
    attr_accessor :healthData
    # (no documentation provided)
    attr_accessor :activityHistory
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :password
    # (no documentation provided)
    attr_accessor :foodHistory

    # the json hash for this User
    def to_jaxb_json_hash
      _h = {}
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['healthData'] = healthData.to_jaxb_json_hash unless healthData.nil?
      _h['activityHistory'] = activityHistory.to_jaxb_json_hash unless activityHistory.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['foodHistory'] = foodHistory.to_jaxb_json_hash unless foodHistory.nil?
      return _h
    end

    # the json (string form) for this User
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['healthData'].nil?
          _oa = _o['healthData']
            if(_oa.is_a? Hash)
              @healthData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @healthData =  Introsde::Finalproj::Model::HealthData.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @healthData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @healthData.push Introsde::Finalproj::Model::HealthData.from_json(_item)
                 else
                   @healthData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @healthData = _oa
            end
          end
        if !_o['activityHistory'].nil?
          _oa = _o['activityHistory']
            if(_oa.is_a? Hash)
              @activityHistory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activityHistory =  Introsde::Finalproj::Model::ActivityHistory.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activityHistory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activityHistory.push Introsde::Finalproj::Model::ActivityHistory.from_json(_item)
                 else
                   @activityHistory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activityHistory = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['foodHistory'].nil?
          _oa = _o['foodHistory']
            if(_oa.is_a? Hash)
              @foodHistory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @foodHistory =  Introsde::Finalproj::Model::FoodHistory.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @foodHistory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @foodHistory.push Introsde::Finalproj::Model::FoodHistory.from_json(_item)
                 else
                   @foodHistory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @foodHistory = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class DailyActivity 

    # (no documentation provided)
    attr_accessor :date
    # (no documentation provided)
    attr_accessor :activity

    # the json hash for this DailyActivity
    def to_jaxb_json_hash
      _h = {}
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      if !activity.nil?
        _ha = Array.new
        activity.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['activity'] = _ha
      end
      return _h
    end

    # the json (string form) for this DailyActivity
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DailyActivity with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Fixnum.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['activity'].nil?
          _oa = _o['activity']
            if(_oa.is_a? Hash)
              @activity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activity =  Introsde::Finalproj::Model::Activity.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activity.push Introsde::Finalproj::Model::Activity.from_json(_item)
                 else
                   @activity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activity = _oa
            end
          end
    end

    # constructs a DailyActivity from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class Activity 

    # (no documentation provided)
    attr_accessor :details

    # the json hash for this Activity
    def to_jaxb_json_hash
      _h = {}
      _h['details'] = details.to_jaxb_json_hash unless details.nil?
      return _h
    end

    # the json (string form) for this Activity
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Activity with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['details'].nil?
          _oa = _o['details']
            if(_oa.is_a? Hash)
              @details = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @details =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @details = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @details.push Hash.from_json(_item)
                 else
                   @details.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @details = _oa
            end
          end
    end

    # constructs a Activity from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class HealthData 

    # (no documentation provided)
    attr_accessor :height
    # (no documentation provided)
    attr_accessor :dailyKCaloriesGoal
    # (no documentation provided)
    attr_accessor :pal
    # (no documentation provided)
    attr_accessor :bmi
    # (no documentation provided)
    attr_accessor :optimalWeight
    # (no documentation provided)
    attr_accessor :physicalActivity
    # (no documentation provided)
    attr_accessor :age
    # (no documentation provided)
    attr_accessor :weight
    # (no documentation provided)
    attr_accessor :bmr
    # (no documentation provided)
    attr_accessor :sex

    # the json hash for this HealthData
    def to_jaxb_json_hash
      _h = {}
      _h['height'] = height.to_jaxb_json_hash unless height.nil?
      _h['dailyKCaloriesGoal'] = dailyKCaloriesGoal.to_jaxb_json_hash unless dailyKCaloriesGoal.nil?
      _h['pal'] = pal.to_jaxb_json_hash unless pal.nil?
      _h['bmi'] = bmi.to_jaxb_json_hash unless bmi.nil?
      _h['optimalWeight'] = optimalWeight.to_jaxb_json_hash unless optimalWeight.nil?
      _h['physicalActivity'] = physicalActivity.to_jaxb_json_hash unless physicalActivity.nil?
      _h['age'] = age.to_jaxb_json_hash unless age.nil?
      _h['weight'] = weight.to_jaxb_json_hash unless weight.nil?
      _h['bmr'] = bmr.to_jaxb_json_hash unless bmr.nil?
      _h['sex'] = sex.to_jaxb_json_hash unless sex.nil?
      return _h
    end

    # the json (string form) for this HealthData
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this HealthData with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['height'].nil?
          _oa = _o['height']
            if(_oa.is_a? Hash)
              @height = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @height =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @height = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @height.push Float.from_json(_item)
                 else
                   @height.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @height = _oa
            end
          end
        if !_o['dailyKCaloriesGoal'].nil?
          _oa = _o['dailyKCaloriesGoal']
            if(_oa.is_a? Hash)
              @dailyKCaloriesGoal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dailyKCaloriesGoal =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dailyKCaloriesGoal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dailyKCaloriesGoal.push Fixnum.from_json(_item)
                 else
                   @dailyKCaloriesGoal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dailyKCaloriesGoal = _oa
            end
          end
        if !_o['pal'].nil?
          _oa = _o['pal']
            if(_oa.is_a? Hash)
              @pal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pal =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pal.push String.from_json(_item)
                 else
                   @pal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pal = _oa
            end
          end
        if !_o['bmi'].nil?
          _oa = _o['bmi']
            if(_oa.is_a? Hash)
              @bmi = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @bmi =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @bmi = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @bmi.push Float.from_json(_item)
                 else
                   @bmi.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @bmi = _oa
            end
          end
        if !_o['optimalWeight'].nil?
          _oa = _o['optimalWeight']
            if(_oa.is_a? Hash)
              @optimalWeight = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @optimalWeight =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @optimalWeight = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @optimalWeight.push Float.from_json(_item)
                 else
                   @optimalWeight.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @optimalWeight = _oa
            end
          end
        if !_o['physicalActivity'].nil?
          _oa = _o['physicalActivity']
            if(_oa.is_a? Hash)
              @physicalActivity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @physicalActivity =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @physicalActivity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @physicalActivity.push Boolean.from_json(_item)
                 else
                   @physicalActivity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @physicalActivity = _oa
            end
          end
        if !_o['age'].nil?
          _oa = _o['age']
            if(_oa.is_a? Hash)
              @age = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @age =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @age = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @age.push Fixnum.from_json(_item)
                 else
                   @age.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @age = _oa
            end
          end
        if !_o['weight'].nil?
          _oa = _o['weight']
            if(_oa.is_a? Hash)
              @weight = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @weight =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @weight = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @weight.push Float.from_json(_item)
                 else
                   @weight.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @weight = _oa
            end
          end
        if !_o['bmr'].nil?
          _oa = _o['bmr']
            if(_oa.is_a? Hash)
              @bmr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @bmr =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @bmr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @bmr.push Float.from_json(_item)
                 else
                   @bmr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @bmr = _oa
            end
          end
        if !_o['sex'].nil?
          _oa = _o['sex']
            if(_oa.is_a? Hash)
              @sex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sex =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sex.push Boolean.from_json(_item)
                 else
                   @sex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sex = _oa
            end
          end
    end

    # constructs a HealthData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Introsde

module Finalproj

module Model

  # (no documentation provided)
  class Pal

    # (no documentation provided)
    LIGHT = "LIGHT"

    # (no documentation provided)
    MODERATE = "MODERATE"

    # (no documentation provided)
    HEAVY = "HEAVY"
  end

end

end

end
